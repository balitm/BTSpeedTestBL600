'//*****************************************************************************
'// Paragon International (c) 2013 - 2016
'//*****************************************************************************

'//*****************************************************************************
'// Definitions
'//*****************************************************************************
#define BLE_SERVICE_PRIMARY 1
#define BLE_ATTR_ACCESS_NONE 0
#define BLE_ATTR_ACCESS_OPEN 1
#define BLE_ATTR_ACCESS_ENC_NO_MITM 2
#define BLE_ATTR_ACCESS_ENC_WITH_MITM 3
#define BLE_ATTR_ACCESS_SIGNED_NO_MITM 4
#define BLE_ATTR_ACCESS_SIGNED_WITH_MITM 5
#define BLE_CHAR_METADATA_ATTR_NOT_PRESENT 0
#define MAX_HTM_LEN 20
#define BLE_CHAR_PROPERTIES_BROADCAST 0x01
#define BLE_CHAR_PROPERTIES_READ    0x02
#define BLE_CHAR_PROPERTIES_WRITE_WO_RESPONSE 0x04
#define BLE_CHAR_PROPERTIES_WRITE 0x08
#define BLE_CHAR_PROPERTIES_NOTIFY 0x10
#define BLE_CHAR_PROPERTIES_INDICATE 0x20
#define BLE_CHAR_PROPERTIES_AUTH_SIGNED_WR 0x40
#define BLE_CHAR_PROPERTIES_RELIABLE_WRITE 0x80
#define SERVICE_IND_UUID "965f6f0621984f4fa3334c5e0f238eb7"
#define CHAR_DATA_UUID "89e63f0299324df191c7a574c880efbf"

#define PT_STATE_NONE              0x00
#define PT_STATE_CONNECTED         0x01
#define PT_STATE_QUIT             0x100

#define PT_DATA_TIMER_TIME 1000

#define PT_SAMPLE_DATA0 "01234567890123456789"
#define PT_SAMPLE_DATA_SIZE 20
#define PT_SAMPLE_NUM 640

#define BLE_NO_TX_BUFFERS 0x6804


'//*****************************************************************************
'// Library Import
'//*****************************************************************************

'//*****************************************************************************
'// Global Variable Declarations
'//*****************************************************************************
dim charData
dim ptState
dim hConn

dim _sampleData
dim _dataToSend$
dim _chunkNum


'//*****************************************************************************
'// Initialise Global Variable
'//*****************************************************************************

'//*****************************************************************************
'// Function and Subroutine definitions
'//*****************************************************************************

function addChar(mdVal as integer, byval chProp as integer, byref uuid$ as string)
  dim rc
  dim mdCccd  '// metadata for CCCD attribute of Characteristic
  dim mdSccd  '// metadata for SCCD attribute of Characteristic
  dim hMeas, cUuid
  dim tmp$

  tmp$ = uuid$
  tmp$ = StrDehexize$(uuid$)
  cUuid = BleHandleUuid128(tmp$)
  if cUuid == 0 then
    DbgMsg("Failed to create a handle")
  endif

  '// There is no CCCD in this characteristic
  if (chProp & BLE_CHAR_PROPERTIES_INDICATE) || (chProp & BLE_CHAR_PROPERTIES_NOTIFY) then
    mdCccd = BleAttrMetadata(BLE_ATTR_ACCESS_OPEN, BLE_ATTR_ACCESS_OPEN, 2, 0, rc)
    AssertResCode(rc, 8101)
    DbgMsgVal("created mdCccd: ", mdCccd)
  else
    mdCccd = BLE_CHAR_METADATA_ATTR_NOT_PRESENT
    DbgMsgVal("No mdCccd needed: ", mdCccd)
  endif

  '// There is no SCCD in this characteristic
  mdSccd = BLE_CHAR_METADATA_ATTR_NOT_PRESENT
  rc = BleCharNew(chProp, cUuid, mdVal, mdCccd, mdSccd)
  AssertResCode(rc, 8100)
endfunc rc

function ptDoAction(byval state as integer) as integer
  dim rc
  dim attr$

  attr$ = ""
  rc = SetAdvertType(ADV_IND, attr$)
  AssertResCodeVal(rc, 1, 8804)
  rc = SetAdvertFPol(ADV_FILTERPOLICY_ANY)
  AssertResCodeVal(rc, 1, 8805)
  rc = SecSetIoCap(BLE_IOCAPABILITY_NONE)
  AssertResCode(rc, 8806)
  attr$ = SERVICE_IND_UUID
  AddLongUuid(attr$)
  AssertResCode(rc, 8807)
  InitAdvReports(BLE_DISCOVERABILITY_GENERAL)
  DbgMsg("Ifinite advert.")
  rc = SetAdvertToutS(0)
  AssertResCodeVal(rc, 1, 8808)
endfunc rc

sub PTBLEInit()
  dim rc
  dim attr$, enc$
  dim name$: name$ = "DataTag"

  //---- clear global hConn  ----
  hConn = -1
  _sampleData = 0
  _dataToSend$ = PT_SAMPLE_DATA0
  _chunkNum = PT_SAMPLE_NUM
  ptState = PT_STATE_NONE
  DbgMsgValH("Init: attr: " + attr$ + ", state code: ", ptState)

  dim hSvc  ' composite handle for the primary service.
  dim sUuid
  dim uuid$
  dim mdVal ' metadata for value attribute of Characteristic

  //---- Create Ind service ----
  uuid$ = SERVICE_IND_UUID
  uuid$ = StrDehexize$(uuid$)
  sUuid = BleHandleUuid128(uuid$)

  //---- Create Indication service -----
  if sUuid == 0 then
    DbgMsg("Failed to create a handle")
  endif
  rc = BleSvcCommit(BLE_SERVICE_PRIMARY, sUuid, hSvc)
  AssertResCode(rc, 8001)
  DbgMsgVal2("Comitted SERVICE_IND_UUID: ", sUuid, hSvc)

  //---- add Data char ----
  mdVal = BleAttrMetadata(BLE_ATTR_ACCESS_OPEN, BLE_ATTR_ACCESS_NONE, 20, 0, rc)
  AssertResCode(rc, 8020)
  uuid$ = CHAR_DATA_UUID
  rc = addChar(mdVal, BLE_CHAR_PROPERTIES_READ | BLE_CHAR_PROPERTIES_NOTIFY, uuid$)
  AssertResCode(rc, 8021)
  attr$ = "data"
  AssertResCode(rc, 8022)
  rc = BleCharCommit(hSvc, attr$, charData)
  AssertResCode(rc, 8023)

  //---- init state ----
  rc = ptDoAction(ptState)
  DbgMsg("1st advert with name: " + name$)
  rc = BleGapSvcInit(name$,DEVICENAME_WRITABLE,APPEARANCE,MIN_CONN_INTERVAL,MAX_CONN_INTERVAL,CONN_SUP_TIMEOUT,SLAVE_LATENCY)
  AssertResCode(rc, 8050)
endsub

function _PTBLENotifyData() as integer
  dim rc

  while _chunkNum > 0
    rc = BleCharValueNotify(charData, _dataToSend$)
    if rc == BLE_NO_TX_BUFFERS then
      rc = 0
      break
    endif
    _chunkNum = _chunkNum - 1
  endwhile
endfunc rc

'//*****************************************************************************
'// Handler definitions
'//*****************************************************************************
sub _PTBLEOnBleMsg(byval nMsgId as integer, byval nCtx as integer)
  dim rc
  dim attr$, enc$

  select nMsgId
  case BLE_EVBLEMSGID_CONNECT
    ptState = ptState | PT_STATE_CONNECTED
    DbgMsgVal2H("Connect handle, State code: ", nCtx, ptState)
    hConn = nCtx

  case BLE_EVBLEMSGID_DISCONNECT
    TimerCancel(PT_TIMER_TEST)
    // _isFirstInd = 1
    ptState = ptState & ~PT_STATE_CONNECTED
    DbgMsgValH("Disconnect: State code: ", ptState)
    if ptState & PT_STATE_QUIT then
      reset(0)
    else
      hConn = -1
      rc = StartAdverts(-1)
      AssertResCode(rc, 8181)
      DbgMsgVal("adverting started, rc: ", rc)
    endif
  case else
    '//Do nothing
  endselect
endsub

// Handler to service writes to CCCD which tells us we can indicate or not.
function _PTHandlerCharCccd(byval hChar as integer, byval val as integer) as integer
  if hChar == charData then
    DbgMsgVal(">>> Notify for Data char is enabled: ", val)
    if val != 0 then
      TimerStart(PT_TIMER_TEST, PT_DATA_TIMER_TIME, 1)
    endif
  else
    DbgMsgVal2("This is for some other characteristic: ", hChar, charData)
  endif
endfunc 1

// Tx Buffer free handler.
function _PTHandlerNotifyBuf()
  dim rc

  rc = _PTBLENotifyData()
  AssertResCode(rc, 9997)
endfunc 1


'//=============================================================================
function _PTTestTimer()
  dim attr$
  dim rc

  _chunkNum = PT_SAMPLE_NUM
  rc = _PTBLENotifyData()
  AssertResCode(rc, 9999)
endfunc 1

'//*****************************************************************************
'// Other initialisations
'//*****************************************************************************
OnEvent EVCHARCCCD  call _PTHandlerCharCccd
OnEvent EVNOTIFYBUF call _PTHandlerNotifyBuf
OnEvent EVTMR2      call _PTTestTimer
